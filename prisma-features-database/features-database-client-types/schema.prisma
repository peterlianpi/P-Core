// This is your Prisma schema file.
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

// Speed up queries and scale easily with Prisma Accelerate:
// https://pris.ly/cli/accelerate-init

// Prisma schema file for database models and relationships
// Define the generator for Prisma Client (JavaScript/TypeScript)
// Generates the Prisma Client in JavaScript/TypeScript.
generator client {
  provider = "prisma-client-js"
  output   = "../prisma-features-database/features-database-client-types"
}

datasource db {
  provider = "postgresql"
  url      = env("PPG_FEATURES_DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum CourseStatus {
  ENROLLED
  PAUSED
  RESUMED
  FINISHED
  CANCELLED
}

enum PurchaseType {
  MONTHLY_FEE
  LESSON_BOOK
  OTHER
}

enum PaymentMethod {
  CASH
  BANK
  ONLINE
  TRANSFER
}

model Student {
  id        String    @id @default(cuid())
  name      String
  birthDate DateTime?
  image     String?
  gender    Gender?
  phone     String?
  address   String?
  email     String?
  guardian  String?
  joinedAt  DateTime  @default(now())
  orgId     String // Link to system DB
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  courses  StudentCourse[]
  payments Purchase[]
  progress LessonProgress[]
}

model Course {
  id          String   @id @default(cuid())
  name        String
  description String?
  level       String? // Beginner, Intermediate, etc.
  orgId       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  lessonBooks LessonBook[]
  students    StudentCourse[]
  payments    Purchase[]
}

model LessonBook {
  id        String   @id @default(cuid())
  title     String
  author    String?
  price     Float    @default(0)
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  progress LessonProgress[]
}

model StudentCourse {
  id         String       @id @default(cuid())
  studentId  String
  courseId   String
  enrolledAt DateTime     @default(now())
  status     CourseStatus @default(ENROLLED)

  student Student @relation(fields: [studentId], references: [id])
  course  Course  @relation(fields: [courseId], references: [id])

  statusLogs CourseStatusLog[]

  @@unique([studentId, courseId])
}

model CourseStatusLog {
  id              String       @id @default(cuid())
  studentCourseId String
  status          CourseStatus
  changedAt       DateTime     @default(now())
  note            String?

  studentCourse StudentCourse @relation(fields: [studentCourseId], references: [id])
}

model LessonProgress {
  id           String    @id @default(cuid())
  studentId    String
  lessonBookId String
  completed    Boolean   @default(false)
  completedAt  DateTime?
  notes        String?

  student    Student    @relation(fields: [studentId], references: [id])
  lessonBook LessonBook @relation(fields: [lessonBookId], references: [id])

  @@unique([studentId, lessonBookId])
}

model Purchase {
  id          String        @id @default(cuid())
  studentId   String
  courseId    String?
  type        PurchaseType
  amount      Float
  description String?
  paidAt      DateTime      @default(now())
  forMonth    DateTime? // Use for monthly fee tracking
  method      PaymentMethod @default(CASH)
  invoiceId   String?
  orgId       String

  student Student @relation(fields: [studentId], references: [id])
  course  Course? @relation(fields: [courseId], references: [id])
}
