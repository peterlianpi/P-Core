// This is your Prisma schema file.
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

// Speed up queries and scale easily with Prisma Accelerate:
// https://pris.ly/cli/accelerate-init

// Prisma schema file for database models and relationships
// Define the generator for Prisma Client (JavaScript/TypeScript)
// Generates the Prisma Client in JavaScript/TypeScript.
generator client {
  provider = "prisma-client-js"
  output   = "generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for user roles
enum UserRole {
  ADMIN
  USER
}

model Account {
  id                String  @id @default(cuid()) // Unique identifier
  userId            String // User ID foreign key
  type              String // Account type (e.g., OAuth)
  provider          String // Provider name (e.g., Google, Facebook)
  providerAccountId String // Unique account ID from the provider
  refresh_token     String? @db.Text // Refresh token (optional, stored as text)
  access_token      String? @db.Text // Access token (optional, stored as text)
  expires_at        Int? // Expiration timestamp for the token
  token_type        String? // Token type (e.g., Bearer)
  scope             String? // OAuth scopes
  id_token          String? @db.Text // ID token (optional, stored as text)
  session_state     String? // Session state (optional)

  createdAt DateTime @default(now()) // Timestamp for creation
  updatedAt DateTime @updatedAt // Timestamp for last update

  user User @relation(fields: [userId], references: [id]) // Relation to User model

  @@unique([provider, providerAccountId]) // Ensures unique combination of provider and account ID
}

model VerificationToken {
  id      String   @id @default(cuid()) // Unique identifier
  email   String // User email
  token   String   @unique // Unique verification token
  expires DateTime // Expiration timestamp

  createdAt DateTime @default(now()) // Timestamp for creation
  updatedAt DateTime @updatedAt // Timestamp for last update

  @@unique([email, token]) // Ensures unique email-token combination
}

model PasswordResetToken {
  id      String   @id @default(cuid()) // Unique identifier
  email   String // User email
  token   String   @unique // Unique reset token
  expires DateTime // Expiration timestamp

  createdAt DateTime @default(now()) // Timestamp for creation
  updatedAt DateTime @updatedAt // Timestamp for last update

  @@unique([email, token]) // Ensures unique email-token combination
}

model TwoFactorToken {
  id      String   @id @default(cuid()) // Unique identifier
  email   String // User email
  token   String   @unique // Unique 2FA token
  expires DateTime // Expiration timestamp

  createdAt DateTime @default(now()) // Timestamp for creation
  updatedAt DateTime @updatedAt // Timestamp for last update

  @@unique([email, token]) // Ensures unique email-token combination
}

model TwoFactorConfirmation {
  id String @id @default(cuid()) // Unique identifier

  userId String // User ID foreign key
  user   User   @relation(fields: [userId], references: [id]) // Relation to User model

  @@unique([userId]) // Ensures each user has only one 2FA confirmation
}

model UpdateLog {
  id        Int      @id @default(autoincrement())
  modelName String // The name of the model (in this case, "Member")
  recordId  Int // ID of the updated record (Member's ID)
  updatedBy String // User ID who performed the update
  date      DateTime @default(now()) // Timestamp of the update

  // Relations to models being tracked
  member Member? @relation(fields: [recordId], references: [id], name: "UpdateLog_member_fkey")

  createdAt DateTime @default(now()) // Timestamp when the log entry was created
  updatedAt DateTime @updatedAt // Timestamp when the log entry was last updated
}

// FamilyRelationship Model: Links two members in a family
model FamilyRelationship {
  id     Int @id @default(autoincrement())
  fromId Int // Member initiating the relationship
  toId   Int // Member receiving the relationship
  typeId Int // Foreign key to RelationshipType

  from Member           @relation("FamilyFrom", fields: [fromId], references: [id])
  to   Member           @relation("FamilyTo", fields: [toId], references: [id])
  type RelationshipType @relation(fields: [typeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([fromId, toId, typeId]) // Ensure unique relationships
}

// RelationshipType Model: Represents types of relationships
model RelationshipType {
  id   Int    @id @default(autoincrement())
  name String @unique // Examples: Parent, Child, Sibling, Spouse

  relationships FamilyRelationship[]
}

// MemberRole Model: Represents different roles that a member can have
model MemberRole {
  id   Int    @id @default(autoincrement()) // Unique ID
  name String @unique // Role name (e.g., YF, MF, WF)

  members MemberRoleAssignment[]
}

// MemberRoleAssignment Model: Links members to roles
model MemberRoleAssignment {
  id       Int        @id @default(autoincrement())
  memberId Int
  roleId   Int
  member   Member     @relation(fields: [memberId], references: [id])
  role     MemberRole @relation(fields: [roleId], references: [id])

  assignedAt DateTime @default(now())

  startedAt DateTime?
  endedAt   DateTime?

  @@unique([memberId, roleId]) // Ensure unique role per member
}

// Home Model: Represents a home
model Home {
  id             Int           @id @default(autoincrement()) // Unique ID
  homeNumber     String // Home number
  address        String? // Optional address
  latitude       Float?
  longitude      Float?
  organizationId Int?
  organization   Organization? @relation(fields: [organizationId], references: [id])

  // Foreign key to Veng
  vengId Int
  veng   Veng @relation(fields: [vengId], references: [id]) // One-to-many relation with Veng

  // List of members in this home
  members Member[] // One-to-many relation with Member

  createdAt DateTime @default(now()) // Timestamp when the home is created
  updatedAt DateTime @updatedAt // Timestamp when the home is last updated
}

// Khawk Model: Represents a Khawk
model Khawk {
  id             Int           @id @default(autoincrement()) // Unique ID
  name           String // Khawk name
  organizationId Int?
  organization   Organization? @relation(fields: [organizationId], references: [id])

  // Vengs associated with this Khawk
  vengs Veng[] // One-to-many relation with Veng

  createdAt DateTime @default(now()) // Timestamp when the Khawk is created
  updatedAt DateTime @updatedAt // Timestamp when the Khawk is last updated
}

// Veng Model: Represents a Veng
model Veng {
  id             Int           @id @default(autoincrement()) // Unique ID for the Veng
  name           String // Name of the Veng
  organizationId Int?
  organization   Organization? @relation(fields: [organizationId], references: [id])

  // Foreign key to Khawk
  khawkId Int
  khawk   Khawk @relation(fields: [khawkId], references: [id]) // One-to-one relation with Khawk

  // Homes associated with this Veng
  homes Home[] // One-to-many relation with Home

  createdAt DateTime @default(now()) // Timestamp when the Veng is created
  updatedAt DateTime @updatedAt // Timestamp when the Veng is last updated
}

// Member Model: Represents a church member
model Member {
  id        Int       @id @default(autoincrement()) // Unique ID
  number    Int?
  name      String // Full name of the member
  birthdate DateTime? // Birthdate of the member
  gender    String? // Gender of the member
  phone     String? // Phone number of the member
  email     String? // Email of the member
  bloodType String? // Blood type of the member
  image     String? // Image of the member
  fbLink    String? // Facebook link of the member

  // Foreign key to Organization  
  organizationId Int?
  organization   Organization? @relation(fields: [organizationId], references: [id])

  // Foreign key to Home
  homeId Int?
  home   Home? @relation(fields: [homeId], references: [id]) // One-to-many relation with Home

  // Many-to-many relationship with MemberRole
  roles MemberRoleAssignment[]

  // Family relationships
  familyFrom FamilyRelationship[] @relation("FamilyFrom")
  familyTo   FamilyRelationship[] @relation("FamilyTo")

  // Spouse relationship
  spouseId Int?
  spouse   Member?  @relation("SpouseRelation", fields: [spouseId], references: [id])
  spouseOf Member[] @relation("SpouseRelation")

  createdAt DateTime @default(now()) // Timestamp when the member is created
  updatedAt DateTime @updatedAt // Timestamp when the member is last updated

  UpdateLog UpdateLog[] @relation(name: "UpdateLog_member_fkey")

  userId String? @unique // Foreign key to User, adding @unique to enforce one-to-one
  user   User?   @relation("UserToMember", fields: [userId], references: [id])
}

model User {
  id                    String                 @id @default(cuid()) // Unique ID for the user
  name                  String? // Optional name field
  email                 String                 @unique // Unique email field for login
  emailVerified         DateTime? // Date when email was verified
  image                 String? // Profile image
  password              String? // User's password
  role                  UserRole               @default(USER) // User role (Admin/User)
  accounts              Account[] // Account-related details
  isTwoFactorEnabled    Boolean                @default(false) // Whether two-factor authentication is enabled
  twoFactorConfirmation TwoFactorConfirmation? // Two-factor confirmation
  defaultOrgId          Int?
  createdAt             DateTime               @default(now()) // Timestamp when user was created
  updatedAt             DateTime               @updatedAt // Timestamp when user was last updated

  // Optional one-to-one relation with Member
  member Member? @relation("UserToMember")

  // Many-to-many relation with Organization
  UserOrganization UserOrganization[]
}

model Organization {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  startedAt   DateTime?
  logoImage   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  members     Member[]
  homes       Home[]
  vengs       Veng[]
  khawks      Khawk[]

  // Many-to-many relation with User
  UserOrganization UserOrganization[]
}

// Join table to manage many-to-many relation
model UserOrganization {
  id             Int                   @id @default(autoincrement())
  userId         String
  role           OrganizationUserRole? // Role specific to the organization
  organizationId Int
  user           User                  @relation(fields: [userId], references: [id])
  organization   Organization          @relation(fields: [organizationId], references: [id])

  @@unique([userId, organizationId]) // Compound primary key to enforce uniqueness
}

enum OrganizationUserRole {
  PASTOR
  ASSISTANT_PASTOR
  LEADER
  ACCOUNTANT
  OFFICE_STAFF
  MEMBER
}

model VersionInfo {
  id          String   @id @default(uuid()) // Unique ID
  version     String   @unique // e.g., "1.0.0", "1.1.0-beta"
  status      String // "beta", "release", "deprecated"
  description String? // Optional details about changes
  createdAt   DateTime @default(now())
}

model Feedback {
  id        String   @id @default(uuid())
  name      String?
  email     String?
  phone     String?
  message   String
  anonymous Boolean  @default(false)
  status    String   @default("Pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
